VERSION = 39;

!The maximum distance between signal ports or anchors connected via wire.
!Warning: wires much longer than 16 blocks may have visual chunk clipping glitches.
max_wire_length = 16;
max_probe_lenght = 8;

!Energy conversions (this mod's energy system operates integer based in quite small scale units):
energy_unit_FE = 100; !Forge Energy 
energy_unit_EU = 400; !Industrialcraft
energy_unit_OC = 1000; !OpenComputers

PRE_INIT() {
	!gate complexity costs: gate_cost:"gateId" = [basic, advanced]#;
	Loc c = gate_cost;
	Loc base = [1, 0]#, base2 = [2, 0]#, adv = [0, 1]#, adv2 = [0, 2]#;
	!variables & IO tab:
	c:"in" = base;
	c:"out" = base;
	c:"read" = base;
	c:"write" = base2;
	c:"i_cst" = base;
	!logic tab:
	c:"not" = base;
	c:"or" = base2;
	c:"nor" = base2;
	c:"and" = base2;
	c:"nand" = base2;
	c:"xor" = [3, 0]#;
	c:"xnor" = [3, 0]#;
	!comparator tab:
	c:"not0" = base;
	c:"is0" = base;
	c:"psgn" = base;
	c:"nsgn" = base;
	c:"eq" = adv;
	c:"neq" = adv;
	c:"ls" = adv;
	c:"geq" = adv;
	!arithmetic tab:
	c:"inc" = adv;
	c:"dec" = adv;
	c:"neg" = adv;
	c:"abs" = [1, 1]#;
	c:"add" = adv2;
	c:"sub" = adv2;
	c:"mul" = [0, 3]#;
	c:"div" = [0, 4]#;
	c:"mod" = [0, 4]#;
	c:"max" = [2, 1]#;
	c:"min" = [2, 1]#;
	
	add("item", 400, "battery", "rs_ctr:battery");
}

INIT() {
	!items that can be used as capacitors in Power Distribution Hub (all Forge Energy compatible items already work without need for registration)
	add("battery", it("m.battery"), 2000000);
	add("shaped", it("m.battery"), "010/232/010", "nuggetGold", it("item.wire_e"), "dustRedstone", it("minecraft:coal"):1);
	
	!processor assembly materials
	!add("circuitMat", <item>, baseCmp, advCmp, memory, -size, gain, cap);
	add("circuitMat", ore("dustRedstone"),   2,  0,  0,  -2,  1,  8); !1.0  cmp/size, 0.5 gain/cmp, 2.0  cmp/it
	add("circuitMat", ore("blockRedstone"), 16,  0,  0, -24, 16, 64); !0.67 cmp/size, 1.0 gain/cmp, 1.78 cmp/it
	add("circuitMat", ore("gemQuartz"),      0,  4,  0,  -4,  2,  8); !1.0  cmp/size, 0.5 gain/cmp, 4.0  cmp/it
	add("circuitMat", ore("blockQuartz"),    0, 12,  0, -16, 12, 24); !0.75 cmp/size, 1.0 gain/cmp, 3.0  cmp/it
	add("circuitMat", ore("nuggetIron"),     0,  0,  1,  -1,  0,  0); !1.0  mem/size, 9.0  mem/ing
	add("circuitMat", ore("ingotIron"),      0,  0,  8,  -6,  0,  0); !1.33 mem/size, 8.0  mem/ing
	add("circuitMat", ore("blockIron"),      0,  0, 48, -30,  0,  0); !1.6  mem/size, 5.33 mem/ing
	add("circuitMat", ore("dustGlowstone"),  0,  0,  0,  -1,  2,  1); !2.0 gain/size, 2.0  gain/it
	add("circuitMat", it("minecraft:glowstone"), 0, 0, 0, -2, 5,  2); !2.5 gain/size, 1.25 gain/it
	add("circuitMat", it("minecraft:redstone_torch"), 3, 0, 0, -2, 1, 4); !1.5 cmp/size, 0.33 gain/cmp, 3.0 cmp/it
	add("circuitMat", it("minecraft:repeater"), 8, 0, 1, -4,  2,  8); !2.0 cmp/size, 0.25 gain/cmp, 2.67 cmp/it(rs)
	add("circuitMat", it("minecraft:comparator"), 0, 8, 0, -4, 2, 8); !2.0 cmp/size, 0.25 gain/cmp, 2.0 cmp/it(rs)
	
	!crafting recipes
	Loc slab = it("minecraft:stone_slab");
	add("shaped", it("tile.editor"), "0/1/2", it("item.wire"), it("minecraft:crafting_table"), it("minecraft:bookshelf"));
	add("shaped", it("tile.assembler"), "0/1/2", it("item.wire"), it("minecraft:anvil"), it("minecraft:chest"));
	add("shaped", 2 * it("tile.rs_port"):0, "0/1", "dustRedstone", slab);
	add("shaped", 2 * it("tile.rs_port"):1, "0/1", it("minecraft:redstone_torch"), slab);
	add("shaped", 8 * it("tile.wire_anchor"), "0/0", it("minecraft:iron_bars"));
	add("shaped", it("tile.splitter"), " 0 /010/ 0 ", it("tile.rs_port"):0, it("tile.rs_port"):1);
	add("shaped", it("tile.analog_comb"), " 0 /010/ 0 ", it("tile.rs_port"):1, it("tile.rs_port"):0);
	add("shaped", it("tile.logic_comb"), "020/212/020", it("tile.rs_port"):1, it("tile.rs_port"):0, it("minecraft:redstone_torch"));
	add("shaped", it("tile.num_comb"), "020/313/020", it("tile.rs_port"):1, it("tile.rs_port"):0, "gemQuartz", "dustRedstone");
	add("shaped", it("tile.bin_comb"), "020/212/020", it("tile.rs_port"):0, it("tile.rs_port"):1, it("item.wire"));
	add("shaped", it("tile.bin_split"), "020/212/020", it("tile.rs_port"):1, it("tile.rs_port"):0, it("item.wire"));
	add("shaped", it("tile.comparator"), "231/ 0 ", it("tile.rs_port"):0, it("tile.rs_port"):1, it("item.block_wire"), it("minecraft:comparator"));
	add("shaped", it("tile.power_hub"), "010/020", it("item.wire_e"), "ingotGold", slab);
	add("shaped", 8 * it("item.wire"), "010", "dustRedstone", it("minecraft:string"));
	add("shaped", 8 * it("item.wire_e"), "000/010/000", it("item.wire"), "ingotGold");
	add("shaped", it("item.wireless"), "000/010/000", it("item.wire"), "enderpearl");
	add("shaped", it("item.constant"), "0/1", it("item.wire"), "gemLapis");
	add("shaped", it("item.lamp"), "0/1", it("item.wire"), "dustGlowstone");
	add("shaped", it("item.tag"), "0/1", it("item.wire"), it("minecraft:name_tag"));
	add("shaped", 4 * it("item.block_wire"), "10 /020/ 01", it("item.wire"), "gemQuartz", "gemLapis");
	add("shaped", it("item.clock"), "0/1", it("item.wire"), it("minecraft:clock"));
	Loc tag = nbt(); tag:"Istats" = [16, 12, 8, 12, 28, 88]#; !prototype processor (eqivalent to assembly with same materials except less remaining space)
	add("shaped", it("tile.processor") + tag, "021/041/031", it("tile.rs_port"):0, it("tile.rs_port"):1, "blockQuartz", "blockRedstone", "ingotIron");
	tag = nbt(); tag:"Istats" = [0, 0, 0, 64, 0, 0]#; !empty processor (64 component space)
	add("shaped", it("tile.processor") + tag, "0 1/0 1/0 1", it("tile.rs_port"):0, it("tile.rs_port"):1);
	moddedRecipes();
}

moddedRecipes() {
	!sensor augments
	sensors_item = [it("minecraft:chest")];
	sensors_fluid = [it("minecraft:bucket")];
	sensors_EU = [it("ic2:meter")];
	sensors_FE = [];
	for (item : [it("immersiveengineering:tool"):2, it("thermalfoundation:meter"), it("opencomputers:tool")]) {
		if (item) {sensors_FE = sensors_FE + item;}
	}
	if (#sensors_FE == 0) {sensors_FE = [it("minecraft:piston")];}
	
	if (hasmod("immersiveengineering")) {
		add("shaped", it("tile.comparator"), "0/1", it("immersiveengineering:connector"):13, it("minecraft:stone_slab"));
		add("shapeless", 8 * it("item.wire"), it("immersiveengineering:wirecoil"):5);
	}
	if (hasmod("appliedenergistics2")) {
		add("shapeless", 4 * it("tile.wire_anchor"), it("appliedenergistics2:part"):120);
		add("shaped", it("item.tag"), "0/1/2", it("appliedenergistics2:material"):21, it("minecraft:paper"), it("item.wire"));
	}
	if (hasmod("opencomputers")) {
		add("battery", it("opencomputers:capacitor"), 1600000); !CAPACITOR
		add("circuitMat", it("opencomputers:material"):6, 3, 0, 0, -2, 1, 3); !transistor
		add("circuitMat", it("opencomputers:material"):7, 1, 3, 0, -1, 0, 4); !chip T1
		add("circuitMat", it("opencomputers:material"):8, 3, 7, 0, -2, 0, 10); !chip T2
		add("circuitMat", it("opencomputers:material"):9, 12, 16, 0, -4, 0, 28); !chip T3
		add("circuitMat", it("opencomputers:material"):10, 12, 8, 0, -4, 0, 20); !ALU
		add("circuitMat", it("opencomputers:storage"):0, 0, 0, 16, -8, -2, 0); !EEPROM
		add("circuitMat", it("opencomputers:component"):6, 0, 0, 32, -8, -8, 16); !RAM T1
		add("circuitMat", it("opencomputers:component"):7, 0, 0, 48, -8, -16, 32); !RAM T1.5
		add("circuitMat", it("opencomputers:capacitor"), 0, 0, 0, -8, 1, 160000); !CAPACITOR (only 1/10 cap here)
	}
}